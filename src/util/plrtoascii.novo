#include "conf.h"
#include "sysdep.h"
#include "structs.h"
#include "utils.h"
#include "db.h"
#include "pfdefaults.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>   /* para dirname() */
#include <ctype.h>


/* DEFINIÇÕES – estes valores devem estar de acordo com sua configuração */
#define MAX_NAME_LENGTH_OLD     12      /* conforme sua antiga definição */
#define MAX_PWD_LENGTH_OLD      34
#define MAX_TITLE_LENGTH    80
#define MAX_SKILLSA         300
#define MAX_AFFECT          32
#define NUM_CONDS           3
#define HOST_LENGTH         40
#define MAX_AFF_FLAGS           64
#define AFF_BITVECTOR_SZ        BITVECTOR_SZ(MAX_AFF_FLAGS)
#define MAX_CMD 512
#define MAX_OUTPUT 1024
#define MAX_PASS 256


#define OLD_MAX_SKILLS  (MAX_SKILLSA+1)
/* Suponha que LIB_PLRFILES, INDEX_FILE e SUF_PLR estejam definidos nos headers. */

/* Empacotamento da estrutura para garantir o layout sem padding */
#pragma pack(push,1)

/* Length-free bitvector macros _____________________________________________ */
#define BITVECTOR_SZ(bits)      ((bits + 7) / 8)
#define BITVECTOR(name, bits)   unsigned char name[BITVECTOR_SZ(bits)]
#define CHK(bitv, bit)          ((bitv[bit / 8] & (1 << bit % 8)) && 1)
#define SET(bitv, bit)          bitv[bit / 8] |= (1 << bit % 8)
#define CLR(bitv, bit)          bitv[bit / 8] &= ~(1 << bit % 8)
#define TOG(bitv, bit)          bitv[bit / 8] ^= (1 << bit % 8)
typedef struct Txt              Txt;
typedef struct TxtHash          TxtHash;
typedef struct Command          Command;
typedef struct Social           Social;

typedef uint8_t                 bitvector8_t;
typedef uint16_t                bitvector16_t;
typedef uint32_t                bitvector32_t;
typedef bitvector32_t           bitvector_t_old;

typedef signed short            level_t;
typedef unsigned long           exp_t;
typedef unsigned long           gold_t;
typedef signed short            point_t;
typedef signed long             idnum_t; /*dump 2025 signed long, dump 2003 int32_t */
typedef char                    sex_t;
typedef char                    pos_t;
typedef char                    pc_class_t;
typedef char                    pc_race_t;
typedef signed short            skill_t;
typedef struct dice_t           dice_t;
typedef signed short            affect_dur_t;
typedef unsigned short          affect_loc_t;
typedef signed short            affect_mod_t;
typedef unsigned char           affect_bit_t [AFF_BITVECTOR_SZ];

typedef signed short            home_vnum;
typedef signed short            clan_vnum;
typedef signed short            clan_rank_num;
#define PATH_MAX        4096

typedef struct TimeInfo         TimeInfo;
typedef struct Weather          Weather;
typedef struct Zone             Zone;
typedef struct ZoneCmd          ZoneCmd;
typedef struct Hometown         Hometown;
typedef struct Room             Room;
typedef struct RoomAlias        RoomAlias;
typedef struct Exit             Exit;
typedef struct RoomNode         RoomNode;
typedef struct RoomNode         Jail;
typedef struct Character        Character;
typedef struct Player           Player;
typedef struct PlayerStore      PlayerStore;
typedef struct PlayerIndex      PlayerIndex;
typedef struct MobProto         MobProto;
typedef struct Mobile           Mobile;
typedef struct ObjProto         ObjProto;
typedef struct Object           Object;
typedef struct ObjStore         ObjStore;
typedef struct ObjStoreEx       ObjStoreEx;
typedef struct ObjStoreHeader   ObjStoreHeader;
typedef struct Shop             Shop;
typedef struct ExDesc           ExDesc;
typedef struct ExField          ExField;
typedef struct SpecProc         SpecProc;

typedef union InetAddress       InetAddress;
typedef struct Descriptor       Descriptor;
typedef struct Proxy            Proxy;
typedef struct Mailer           Mailer;
typedef struct Editor           Editor;
typedef struct Pager            Pager;
typedef struct Board            Board;
typedef struct BoardMsg         BoardMsg;
typedef struct House            House;
typedef struct Interface        Interface;
typedef struct InterfaceHnd     InterfaceHnd;

typedef struct task_schedule            TaskSched;
typedef struct sock_listen_data         Listen;
typedef struct sock_accept_handler      AcceptHnd;
typedef struct last_data                LastEnt;
typedef struct clan_data                Clan;
typedef struct clan_rank_data           ClanRank;
typedef struct clan_log_data            ClanLog;
typedef struct PlayerSkill      PlayerSkill;
   typedef struct PlayerTime       PlayerTime;


typedef struct ChAbilities      ChAbilities;
   typedef struct ChPoints         ChPoints;
   typedef struct ChAffection      ChAffection;
   typedef struct ChSpecials       ChSpecials;                                                     typedef struct Follower         Follower;  

struct PlayerSkill {    /* USED IN PLAYER FILE */
     char prac;            /* How much the player practiced it (%)          */
     bitvector8_t bits;    /* Small per-skill bitvector                     */
   };

   struct PlayerTime {
     time_t birth;         /* This represents the characters age            */
     time_t creation;      /* Time of character creation                    */
     time_t access;        /* Time of the last logon                        */
     time_t modify;        /* Time of the last modify (save, set, etc)      */
     long played;          /* This is the total accumulated played time     */
   };

struct ChAbilities {    /* USED IN PLAYER FILE */
signed char str;
     signed char str_add;                                                                            signed char intel;
     signed char wis;                                                                                signed char dex;
     signed char con;
     signed char cha;
   };

struct ChPoints {       /* USED IN PLAYER FILE */
     point_t hit, max_hit;         /* Max hit for PC/NPC                    */                       point_t mana, max_mana;       /* Max mana for PC/NPC                   */
     point_t move, max_move;       /* Max move for PC/NPC                   */
                                                                                                     point_t align;                /* Alignment -1000..+1000                */
     point_t armor;                /* Internal -100..100 AC                 */
     point_t breath;               /* Breath for PC                         */
     point_t hitroll;              /* Bonus or penalty to the hit roll      */
     point_t damroll;              /* Bonus or penalty to the damage roll   */
     point_t saving_throw[5];      /* Saving throw (Bonuses)                */
                                                                                                     gold_t gold;                  /* Money carried                         */
     gold_t bank_gold;             /* Gold the char has in a bank account   */
     exp_t exp;                    /* The experience of the player          */
     };
                                                                                                   struct ChAffection {    /* USED IN PLAYER FILE */                                                 skill_t type;                 /* The type of spell that caused this    */                       affect_dur_t duration;        /* For how long its effects will last    */
     affect_loc_t location;        /* Tells which ability to change (APPLY_) */
     affect_mod_t modifier;        /* This is added to apropriate ability   */
     affect_bit_t bitvector;       /* Tells which bits to set (AFF_)        */

     ChAffection *next;                                                                            };

struct PlayerStore {
  idnum_t idnum;
  char name[MAX_NAME_LENGTH_OLD+1];
  char passwd[MAX_PWD_LENGTH_OLD+1];        /* character's password */
  char title[MAX_TITLE_LENGTH+1];
  sex_t sex;
  pc_class_t chclass;
  pc_race_t chrace;
  level_t level;
  level_t sublevel;
  level_t invis_level;
  level_t freeze_level;
  bitvector_t_old flags;
  bitvector_t_old pref;
  bitvector16_t chan;
  bitvector16_t was_class;
  affect_bit_t affected_by;
  point_t karma;
  point_t wimp;
  point_t conditions[NUM_CONDS];
  short weight;
  short height;
  short practices;
  room_vnum load_room;
  home_vnum hometown;
  clan_vnum clan_num;
  clan_rank_num clan_rank;
  short num_death;
  short num_traps;
  short num_incarnations;
  unsigned char term_type;
  unsigned char credits;
  unsigned char bad_pws;
  unsigned char term_width;
  unsigned char term_height;
  char spare__0[1];
  bitvector_t_old cst;
  char spare__1[25];
  ChAbilities abilities;
  ChPoints points;
  ChAffection affected[MAX_AFFECT];

  PlayerSkill skills[OLD_MAX_SKILLS];
  PlayerTime time;
  in_addr_t rawip;
  char host[HOST_LENGTH+1];
  char filler[5];
};
#pragma pack(pop)

#include <ctype.h>

/* Retorna 1 se o nome começar com Maiúscula seguida por minúsculas */
int nome_valido(const char *nome) {
    /* Verifica se os dois primeiros caracteres existem e seguem o padrão */
    if (!isupper((unsigned char)nome[0]) || !islower((unsigned char)nome[1]))
        return 0;
    
    /* Continua verificando os caracteres seguintes */
    for (int i = 2; nome[i] != '\0'; i++) {
        if (!islower((unsigned char)nome[i]) && nome[i] != ' ')
            return 0;
    }
    
    return 1;
}

#define RECORD_SIZE  1768 //sizeof(struct PlayerStore)
/* Função auxiliar para converter um bitvector (long) em string ASCII.
i   Usa a string "abcdefghijklmnopqrstuvwxyzABCDEF". */ 
int sprintascii(char *out, long bits) {
  int i, j = 0;
  char *flag_chars = "abcdefghijklmnopqrstuvwxyzABCDEF";
  for (i = 0; flag_chars[i] != '\0'; i++) {
    if (bits & (1 << i))
      out[j++] = flag_chars[i];
  }
  if (j == 0)
    out[j++] = '0';    
  out[j] = '\0';  
  return j;
}

/* Função auxiliar para gerar o nome do arquivo do player.
   Converte o nome para minúsculas e usa-o para formar o caminho de saída.
   Exemplo: se LIB_PLRFILES="/lib/plrfiles/", SUF_PLR="plr", e o nome for "Blug",
   e o nome for classificado em A-E, o arquivo será: /lib/plrfiles/A-E/blug.plr */
int plr_filename(char *orig_name, char *filename) {
    const char *middle;
    char name[64];
    int i;
    if (orig_name == NULL || *orig_name == '\0' || filename == NULL) {
        perror("error getting player file name");
        return 0;
    }
    strncpy(name, orig_name, sizeof(name)-1);
    name[sizeof(name)-1] = '\0';
    for (i = 0; name[i]; i++) {
        name[i] = LOWER(name[i]);
    }
    for (i = 0; name[i] != '\0'; i++) {
      printf("%02x ", (unsigned char)name[i]);
    }
    printf("\n");
    switch (name[0]) {
        case 'a': case 'b': case 'c': case 'd': case 'e':
            middle = "A-E";
            break;
        case 'f': case 'g': case 'h': case 'i': case 'j':
            middle = "F-J";
            break;
        case 'k': case 'l': case 'm': case 'n': case 'o':
            middle = "K-O";
            break;
        case 'p': case 'q': case 'r': case 's': case 't':
            middle = "P-T";
            break;
        case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
            middle = "U-Z";
            break;
        default:
            middle = "ZZZ";
            break;
    }
    sprintf(filename, "%s%s/%s.%s", LIB_PLRFILES, middle, name, SUF_PLR);
    return 1;
}

/* Função principal de conversão: lê cada registro do arquivo binário e gera um arquivo ASCII correspondente.
   O arquivo de índice é criado no mesmo diretório que o arquivo de jogadores. */
void convert(char *bin_filename) {
    FILE *fl, *outfile, *index_file;
    struct PlayerStore player;
    char index_name[256], outname[256], path[256], bits[127];
    int i;
    //char senha_base[256] = "1234";   // string a ser concatenada
    char cmd[MAX_CMD];
    char output[MAX_OUTPUT];
    char nova_senha[MAX_PASS] = "";
    FILE *fp;
  
    if (!(fl = fopen(bin_filename, "rb"))) {
        perror("error opening binary player file");
        exit(1);
    }
  
    /* Determina o diretório para o index */
    strcpy(path, bin_filename);
    sprintf(index_name, "%s/index", dirname(path));
   
    if (!(index_file = fopen(index_name, "w"))) {
        perror("error opening index file");
        exit(1);
    }

    while (fread(&player, RECORD_SIZE, 1, fl) == 1) {
    long pos = ftell(fl) - RECORD_SIZE;  // Obtém a posição inicial do registro

    if (player.name[0] == '\0') {
        /* Registro inválido – pular byte a byte até encontrar um candidato. */
        int c;
        printf("Registro inválido na pos %ld; buscando novo inicio byte a byte...\n", pos);

        while ((c = fgetc(fl)) != EOF) {
            if (c != 0) {
                ungetc(c, fl);  // Reposiciona o byte lido
                break;
            }
        }
        continue;  // Tenta ler um novo registro
    }

    /* Nome válido encontrado, processa normalmente */
    if (!plr_filename(player.name, outname))
        exit(1);
    


    /* Escreve no index: idnum, nome, nível, 0 e last_logon (usado 0) */
    fprintf(index_file, "%ld %s %d 0 %ld\n",
            player.idnum, player.name, (int)player.level,0L);

    printf("writing: %s (pos: %ld)\n", outname, pos);
      
        if (!(outfile = fopen(outname, "w"))) {
            fprintf(stderr, "error opening output file %s\n", outname);
            exit(1);
        }
      
      snprintf(cmd, sizeof(cmd), "../bin/asciipasswd %s %s%ld", player.name, player.name, player.idnum);

    // Abre um pipe para ler a saída do comando
    fp = popen(cmd, "r");
    if (fp == NULL) {
        perror("popen falhou");
        exit(1);
    }

    // Lê a saída linha a linha e procura pela linha que começa com "Pass:"
    while (fgets(output, sizeof(output), fp) != NULL) {
        if (strncmp(output, "Pass:", 5) == 0) {
            // Pula "Pass:" e os espaços
            char *pass_ptr = output + 5;
            while (*pass_ptr && isspace((unsigned char)*pass_ptr))
                pass_ptr++;
            // Remove a quebra de linha, se houver
            char *newline = strchr(pass_ptr, '\n');
            if (newline)
                *newline = '\0';
            strncpy(nova_senha, pass_ptr, MAX_PASS - 1);
            nova_senha[MAX_PASS - 1] = '\0';
            break;
        }
    }
    pclose(fp);
        printf("Nova Senha: %s\n",nova_senha);
        /* Escreve os campos no arquivo ASCII */
        fprintf(outfile, "Name: %s\n", player.name);
        fprintf(outfile, "Pass: %s\n", nova_senha);
        fprintf(outfile, "Titl: Sobrevivente do Desafio\n");
        fprintf(outfile, "Sex : %d\n", (int)player.sex);
        fprintf(outfile, "Clas: %d\n", (int)player.chclass);
        fprintf(outfile, "Levl: %d\n", (int)player.level);
        fprintf(outfile, "Id  : %ld\n", player.idnum);
        fprintf(outfile, "Brth: 1740346310\n");
        fprintf(outfile, "Plyd: %d\n", (int)player.time.played);
        fprintf(outfile, "Last: %ld\n",0L);
        if (player.hometown != PFDEF_HOMETOWN)
            fprintf(outfile, "Htwn: %d\n", (int)player.hometown);
        if (strlen(player.host) > 0)
            fprintf(outfile, "Host: %s\n", player.host);
        if (player.height != PFDEF_HEIGHT)
            fprintf(outfile, "Hite: %d\n", (int)player.height);
        if (player.weight != PFDEF_WEIGHT)
            fprintf(outfile, "Wate: %d\n", (int)player.weight);
        fprintf(outfile, "Alin: %d\n", PFDEF_ALIGNMENT);
      
        /* Outros campos (como habilidades, affected, etc.) podem ser adicionados conforme necessário */
        sprintascii(bits, (long)player.flags);
    fprintf(outfile, "Act : %s\n", bits);

    sprintascii(bits, *((long *)player.affected_by));
    fprintf(outfile, "Aff : %s\n", bits);

    sprintascii(bits, (long)player.pref);
    fprintf(outfile, "Pref: %s\n", bits);

    fprintf(outfile, "Wimp: %d\n", (int)player.wimp);
    fprintf(outfile, "Frez: %d\n", (int)player.freeze_level);
    fprintf(outfile, "Invs: %d\n", (int)player.invis_level);
    fprintf(outfile, "Room: %d\n", (int)player.load_room);
    fprintf(outfile, "Badp: %d\n", (int)player.bad_pws);
    fprintf(outfile, "Lern: %d\n", (int)player.practices);

    fprintf(outfile, "Hit : %d/%d\n", player.points.hit, player.points.max_hit);
    fprintf(outfile, "Mana: %d/%d\n", player.points.mana, player.points.max_mana);
    fprintf(outfile, "Move: %d/%d\n", player.points.move, player.points.max_move);
    fprintf(outfile, "Breath : 100/100\n");
    fprintf(outfile, "Ac  : %d\n", player.points.armor);
    fprintf(outfile, "Gold: %lu\n", player.points.gold);
    fprintf(outfile, "Bank: %lu\n", player.points.bank_gold);
    fprintf(outfile, "Exp : %lu\n", player.points.exp);
    fprintf(outfile, "Hrol: %d\n", player.points.hitroll);
    fprintf(outfile, "Drol: %d\n", player.points.damroll);

    fprintf(outfile, "Str : %d/%d\n", player.abilities.str, player.abilities.str_add);
    fprintf(outfile, "Int : %d\n", player.abilities.intel);
    fprintf(outfile, "Wis : %d\n", player.abilities.wis);
    fprintf(outfile, "Dex : %d\n", player.abilities.dex);
    fprintf(outfile, "Con : %d\n", player.abilities.con);
    fprintf(outfile, "Cha : %d\n", player.abilities.cha);

    fprintf(outfile, "Dth: %d\n", player.num_death); 
    fprintf(outfile, "Traps: %d\n", player.num_traps);
    fprintf(outfile, "Incarn: %d\n", player.num_incarnations);  
    fprintf(outfile, "Karm: %d\n", player.karma);
    
    fprintf(outfile, "Olc: 0\n");
    fprintf(outfile, "Page: 60\n");
    fprintf(outfile, "ScrW: 80\n");
    fprintf(outfile, "Qstp: 0\n");
    fprintf(outfile, "Qctn: 0\n");

    fprintf(outfile, "Skil:\n");
    for (i = 1; i < OLD_MAX_SKILLS; i++) {
      if (player.skills[i].prac > 0) {
        fprintf(outfile, "%d %d\n", i, (int)player.skills[i].prac);
      }
    } 

    //Skill crash?
    fprintf(outfile, "0 0\n");

    fprintf(outfile, "Affs:\n");
    /*for (i = 0; i < MAX_AFFECT; i++) {
      if (player.affected[i].type)
        fprintf(outfile, "%d %d %d %d %d\n",
                player.affected[i].type,
                player.affected[i].duration,
                player.affected[i].modifier,
                player.affected[i].location,
                player.affected[i].bitvector[0]);
    } */
    fprintf(outfile, "0 0 0 0 0 0 0 0\n");
    //fprintf(outfile, "0 0 0 0 0\n");

        fclose(outfile);
    }
  
    fclose(fl);
    fclose(index_file);
    exit(0);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage: %s playerfile-name\n", argv[0]);
        return 1;
    }
    convert(argv[1]);
    return 0;
}
